@model airbnb.Models.Reservation

@{
    ViewData["Title"] = "Rezervasyon Yap";
    var house = ViewData["House"] as airbnb.Models.House;
    var reservedRanges = ViewData["ReservedRanges"];
    var availableFrom = ViewData["AvailabilityStart"] as string;
    var availableTo = ViewData["AvailabilityEnd"] as string;
}

<div class="container mt-5">
    <div class="row">
        <!-- Ev bilgileri -->
        <div class="col-md-6">
            <div class="card shadow-sm">
                <img src="@house.ImagePath" class="card-img-top" style="height: 300px; object-fit: cover;" />
                <div class="card-body">
                    <h3 class="card-title">@house.Title</h3>
                    <p class="card-text">@house.Description</p>
                    <p><strong>Fiyat:</strong> ₺@house.PricePerNight / gece</p>
                    <p><strong>Konum:</strong> @house.Location</p>
                </div>
            </div>
        </div>

        <!-- Rezervasyon formu -->
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h4 class="card-title mb-3">Tarih Seç</h4>

                    <form asp-action="StartPayment" asp-controller="Payments" method="post">


                        <input type="hidden" asp-for="HouseId" />
                        <div asp-validation-summary="ModelOnly" class="text-danger mb-2"></div>

                        <div class="form-group mb-3">
                            <label asp-for="StartDate" class="form-label">Başlangıç Tarihi</label>
                            <input asp-for="StartDate" type="date" class="form-control" id="StartDate"
                                min="@DateTime.Today.ToString("yyyy-MM-dd")" max="@availableTo" />

                            <span asp-validation-for="StartDate" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="EndDate" class="form-label">Bitiş Tarihi</label>
                            <input asp-for="EndDate" type="date" class="form-control" id="EndDate"
                                min="@DateTime.Today.ToString("yyyy-MM-dd")" max="@availableTo" />

                            <span asp-validation-for="EndDate" class="text-danger"></span>

                            <span id="dateRangeError" class="text-danger mb-2 d-block"></span>

                        </div>

                        <button type="submit" class="btn btn-primary w-100 mt-2">Rezervasyonu Tamamla</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        const reservedRanges = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(reservedRanges));
        console.log("reservedRanges:", reservedRanges);

        function disableReservedDates(input) {
            input.addEventListener('input', () => {
                const selectedDate = new Date(input.value);
                for (const range of reservedRanges) {
                    const start = new Date(range.startDate);
                    const end = new Date(range.endDate);

                    if (selectedDate >= start && selectedDate < end) {
                        alert("Bu tarih aralığı zaten rezerve edilmiş. Lütfen başka bir tarih seçin.");
                        // input.value = ""; // ← Artık silinmiyor, sadece uyarı veriliyor
                        break;
                    }
                }

                validateDateRange(); // Her değişimde tarih karşılaştırması da yapılsın
            });
        }

        // Mantık hatasını kontrol eden fonksiyon
        function validateDateRange() {
            const startInput = document.getElementById("StartDate");
            const endInput = document.getElementById("EndDate");
            const errorSpan = document.getElementById("dateRangeError");

            const startDate = new Date(startInput.value);
            const endDate = new Date(endInput.value);

            if (startInput.value && endInput.value && startDate > endDate) {
                errorSpan.innerText = "Başlangıç tarihi, bitiş tarihinden sonra olamaz!";
                return false;
            }
            if (startDate.getTime() === endDate.getTime()) {
                errorSpan.innerText = "Başlangıç ve bitiş tarihi aynı olamaz!";
                return false;
            }

            errorSpan.innerText = "";
            return true;
        }

        // Submit kontrolü
        document.querySelector("form").addEventListener("submit", function (e) {
            if (!validateDateRange()) {
                e.preventDefault();
            }
        });

        disableReservedDates(document.getElementById("StartDate"));
        disableReservedDates(document.getElementById("EndDate"));
    </script>
}
